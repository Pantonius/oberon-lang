MODULE MeinSpieler;    (* Beispiel fuer einen Mitspieler *)IMPORT SSP := SchereSteinPapier, Spieler, RandomNumbers, Oberon;TYPE     MeinSpieler = POINTER TO MeinSpielerDesc;    MeinSpielerDesc = RECORD (Spieler.SpielerDesc)                                    MyMoves, PartnerMoves: ARRAY SSP.MaxSpieler, SSP.N OF SHORTINT;                                    PartnerCount: ARRAY SSP.MaxSpieler OF INTEGER;    END;PROCEDURE (ms : MeinSpieler) InitSpieler* (S : INTEGER);(* Initialisiert den Spieler. Am Turnier nehmen S (S < SSP.MaxSpieler) verschiedene Spieler teil *)VAR    i, j: INTEGER;BEGIN    RandomNumbers.InitSeed(Oberon.Time());    ms.name:="Flying Dutchman";    FOR i:= 0 TO S-1 DO        ms.PartnerCount[i]:=0;        FOR i:=0 TO SSP.N DO            ms.PartnerMoves[i, j]:=-1;            ms.MyMoves[i, j]:=-1;        END;    END;END InitSpieler;PROCEDURE FindeZug(Zahl: REAL): SHORTINT;BEGIN    IF (Zahl <= 1) & (Zahl > 0.666) THEN RETURN 2;        ELSIF (Zahl <= 0.666) & (Zahl > 0.333) THEN RETURN 1;        ELSIF (Zahl <= 0.333) & (Zahl >= 0) THEN RETURN 0    END;END FindeZug;PROCEDURE (ms : MeinSpieler) ZeigeSymbol* (p : INTEGER) : Spieler.Symbol;(* Diese Prozedur befragt Ihren Spieler, welches Symbol er dem Spielerpartner p zeigen will *)VAR    i, iSchere, iPapier, iStein: INTEGER;    Zug: SHORTINT;BEGIN    iSchere:=0;    iPapier:=0;    iStein:=0;    IF ms.PartnerCount[p] > 1        THEN            FOR i:=0 TO ms.PartnerCount[p]-2 DO                IF ms.MyMoves[p, i]=ms.MyMoves[p, ms.PartnerCount[p]-1] THEN                    IF ms.PartnerMoves[p, ms.PartnerCount[p]-1] = Spieler.Schere THEN INC(iSchere);                        ELSIF ms.PartnerMoves[p, ms.PartnerCount[p]-1] = Spieler.Stein THEN INC(iStein);                        ELSIF ms.PartnerMoves[p, ms.PartnerCount[p]-1] = Spieler.Papier THEN INC(iPapier);                    END;                END;            END;            IF (iSchere > iStein) & (iSchere > iPapier) THEN Zug:=Spieler.Stein;                 ELSIF (iStein > iSchere) & (iStein > iPapier) THEN Zug:=Spieler.Papier;                 ELSIF (iPapier > iStein) & (iPapier > iSchere) THEN Zug:=Spieler.Schere;                ELSE Zug:=FindeZug(RandomNumbers.Uniform());            END;        ELSE            Zug:=FindeZug(RandomNumbers.Uniform());    END;    IF (Zug > 2) OR (Zug < 0) THEN Zug:=FindeZug(RandomNumbers.Uniform()); END;    ms.MyMoves[p, ms.PartnerCount[p]]:=Zug;    RETURN Zug;END ZeigeSymbol;PROCEDURE (ms : MeinSpieler) PartnerZeigte* (p : INTEGER; s : Spieler.Symbol);(* Was war die Entscheidung des Partners p beim letzten Spiel? Welches Symbol hat er gezeigt? *)BEGIN    ms.PartnerMoves[p, ms.PartnerCount[p]]:=s;    INC(ms.PartnerCount[p]);END PartnerZeigte;PROCEDURE Anmelden*;    (* Meldet diesen Spieler beim Turnier an *)    VAR ms:MeinSpieler;BEGIN    NEW(ms);    SSP.FuegeHinzu(ms);END Anmelden;END MeinSpieler.MeinSpieler.Anmelden