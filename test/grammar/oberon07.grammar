(*
   The Syntax of Oberon 07
   Niklaus Wirth, 3.5.2016
*)

letter = "A"|"B"|...|"Z"|"a"|"b"|...|"z" .
digit = "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9" .
hex_digit = digit|"A"|"B"|"C"|"D"|"E"|"F" .

ident = letter { letter | digit } .
qualident = [ ident "." ] ident .
identdef = ident [ "*" ] .

integer = digit { digit } | digit { hex_digit } "H" .
real = digit { digit } "." { digit } [ scale_factor ] .
scale_factor = "E" [ "+" | "-" ] digit { digit } .
number = integer | real .
string = """ { character } """ | digit { hex_digit } "X" .

const_declaration = identdef "=" const_expression .
const_expression = expression .

TypeDeclaration = identdef "=" type.
type = qualident | ArrayType | RecordType | PointerType | ProcedureType.
ArrayType = ARRAY length {"," length} OF type.
length = ConstExpression.
RecordType = RECORD ["(" BaseType ")"] [FieldListSequence] END.
BaseType = qualident.
FieldListSequence = FieldList {";" FieldList}.
FieldList = IdentList ":" type.
IdentList = identdef {"," identdef}.
PointerType = POINTER TO type.
ProcedureType = PROCEDURE [FormalParameters].

VariableDeclaration = IdentList ":" type.

expression = SimpleExpression [relation SimpleExpression].
relation = "="|"#"|"<"|"<="|">"|">="|IN|IS.
SimpleExpression = ["+" | "-"] term {AddOperator term}.
AddOperator = "+" | "-" | OR.
term = factor {MulOperator factor}.
MulOperator = "*" | "/" | DIV | MOD | "&".
factor = number | string | NIL | TRUE | FALSE | set | designator [ActualParameters] | "(" expression ")" | "~" factor.
designator = qualident {selector}.
selector = "." ident | "[" ExpList "]" | "^" | "(" qualident ")".
set = "{" [element {"," element}] "}".
element = expression [".." expression].
ExpList = expression {"," expression}.
ActualParameters = "(" [ExpList] ")" .

statement = [assignment | ProcedureCall | IfStatement | CaseStatement | WhileStatement | RepeatStatement | ForStatement].
assignment = designator ":=" expression.
ProcedureCall = designator [ActualParameters].
StatementSequence = statement {";" statement}.
IfStatement = IF expression THEN StatementSequence {ELSIF expression THEN StatementSequence} [ELSE StatementSequence] END.
CaseStatement = CASE expression OF case {"|" case} END.
case = [CaseLabelList ":" StatementSequence].
CaseLabelList = LabelRange {"," LabelRange}.
LabelRange = label [".." label].
label = integer | string | qualident.
WhileStatement = WHILE expression DO StatementSequence {ELSIF expression DO StatementSequence} END.
RepeatStatement = REPEAT StatementSequence UNTIL expression.
ForStatement = FOR ident ":=" expression TO expression [BY ConstExpression] DO StatementSequence END.

ProcedureDeclaration = ProcedureHeading ";" ProcedureBody ident.
ProcedureHeading = PROCEDURE identdef [FormalParameters].
ProcedureBody = DeclarationSequence [BEGIN StatementSequence] [RETURN expression] END.
declaration_sequence = [CONST {const_declaration ";"}] [TYPE { type_declaration ";"}] [VAR {variable_declaration ";"}] { procedure_declaration ";"}.
FormalParameters = "(" [FPSection {";" FPSection}] ")" [":" qualident].
FPSection = [VAR] ident {"," ident} ":" FormalType.
FormalType = {ARRAY OF} qualident.

module = MODULE ident ";" [ImportList] DeclarationSequence [BEGIN StatementSequence] END ident "." .
ImportList = IMPORT import {"," import} ";".
import = ident [":=" ident].