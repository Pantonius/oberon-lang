FIRST Sets of the Grammar of the Oberon Programming Language
----------------------------------------------------------------------------------------------------------------------------

actual_parameters         | [<(>]
array_type                | [<ARRAY>]
assignment                | [<ident_literal>]
case_statement            | []
const_declarations        | [<CONST>]
declarations              | [<PROCEDURE>, <TYPE>, <CONST>, <VAR>, <Îµ>]
expression                | [<TRUE>, <string_literal>, <ident_literal>, <FALSE>, <(>, <integer_literal>, <->, <+>, <~>]
factor                    | [<FALSE>, <ident_literal>, <integer_literal>, <(>, <~>, <string_literal>, <TRUE>]
field_list                | [<ident_literal>]
for_statement             | [<FOR>]
formal_parameters         | [<(>]
fp_section                | [<...>, <ident_literal>, <VAR>]
ident                     | [<ident_literal>]
ident_list                | [<ident_literal>]
if_statement              | [<IF>]
integer                   | [<integer_literal>]
loop_statement            | [<LOOP>]
module                    | [<MODULE>]
procedure_body            | [<VAR>, <END>, <BEGIN>, <PROCEDURE>, <TYPE>, <CONST>]
procedure_call            | [<ident_literal>]
procedure_declaration     | [<PROCEDURE>]
procedure_heading         | [<PROCEDURE>]
record_type               | [<RECORD>]
repeat_statement          | [<REPEAT>]
selector                  | [<[>, <.>]
simple_expression         | [<->, <+>, <~>, <integer_literal>, <(>, <ident_literal>, <FALSE>, <string_literal>, <TRUE>]
statement                 | [<RETURN>, <EXIT>, <WHILE>, <IF>, <REPEAT>, <ident_literal>, <LOOP>, <FOR>]
statement_sequence        | [<FOR>, <LOOP>, <ident_literal>, <IF>, <REPEAT>, <WHILE>, <EXIT>, <RETURN>]
string                    | [<string_literal>]
term                      | [<TRUE>, <string_literal>, <~>, <(>, <FALSE>, <ident_literal>, <integer_literal>]
type                      | [<ident_literal>, <RECORD>, <ARRAY>]
type_declarations         | [<TYPE>]
var_declarations          | [<VAR>]
while_statement           | [<WHILE>]
with_statement            | []